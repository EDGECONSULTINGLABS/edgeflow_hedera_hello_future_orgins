{
  "name": "EdgeFlow NFT Onboarding",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "edgeflow-onboarding",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "edgeflow-onboarding-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate incoming data from EdgeFlow UI\nconst itemData = $input.first().json;\n\n// Validate required fields\nconst requiredFields = ['itemName', 'sku', 'price'];\nconst missingFields = requiredFields.filter(field => !itemData[field]);\n\nif (missingFields.length > 0) {\n  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n}\n\n// Generate HIP-412 compliant metadata\nconst metadata = {\n  name: itemData.itemName,\n  description: itemData.description || `NFT for ${itemData.itemName}`,\n  image: itemData.imageUrl || '',\n  attributes: [\n    {\n      trait_type: \"SKU\",\n      value: itemData.sku\n    },\n    {\n      trait_type: \"Price\",\n      value: parseFloat(itemData.price).toFixed(2)\n    },\n    {\n      trait_type: \"Category\",\n      value: itemData.category || \"Uncategorized\"\n    },\n    {\n      trait_type: \"Minted Date\",\n      value: new Date().toISOString()\n    }\n  ],\n  properties: {\n    files: [\n      {\n        type: \"image/jpeg\",\n        uri: itemData.imageUrl || \"\"\n      }\n    ]\n  }\n};\n\n// Prepare data for NFT minting\nconst nftData = {\n  tokenName: itemData.tokenName || `${itemData.itemName} NFT`,\n  tokenSymbol: itemData.tokenSymbol || itemData.sku.replace(/[^A-Z0-9]/g, '').substring(0, 10),\n  treasuryAccountId: process.env.HEDERA_TREASURY_ACCOUNT_ID || '0.0.123456',\n  metadata: JSON.stringify(metadata),\n  metadataStorageType: itemData.metadataStorage || 'memo',\n  maxSupply: 1,\n  // Original item data for Google Sheets\n  originalItemData: itemData\n};\n\nreturn [{\n  json: nftData\n}];"
      },
      "id": "data-processor",
      "name": "Process Item Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "resource": "nft",
        "operation": "mintNft",
        "tokenName": "={{ $json.tokenName }}",
        "tokenSymbol": "={{ $json.tokenSymbol }}",
        "treasuryAccountId": "={{ $json.treasuryAccountId }}",
        "metadata": "={{ $json.metadata }}",
        "metadataStorageType": "={{ $json.metadataStorageType }}",
        "maxSupply": "={{ $json.maxSupply }}"
      },
      "id": "hedera-nft-node",
      "name": "Mint NFT on Hedera",
      "type": "n8n-nodes-base.hedera",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "hederaApi": {
          "id": "hedera-credentials",
          "name": "Hedera Testnet"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "={{ $env.GOOGLE_SHEET_ID }}",
        "sheetName": "Inventory",
        "options": {
          "valueInputOption": "USER_ENTERED"
        }
      },
      "id": "google-sheets-node",
      "name": "Update Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [900, 300],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-credentials",
          "name": "Google Sheets"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": `Item ${$('Process Item Data').item.json.originalItemData.itemName} added successfully!`,\n  \"nft\": {\n    \"tokenId\": $('Mint NFT on Hedera').item.json.tokenId,\n    \"serialNumber\": $('Mint NFT on Hedera').item.json.serialNumber,\n    \"explorerUrl\": $('Mint NFT on Hedera').item.json.explorerUrl\n  },\n  \"inventory\": {\n    \"rowAdded\": true,\n    \"sheetId\": $env.GOOGLE_SHEET_ID\n  }\n}",
        "options": {}
      },
      "id": "response-node",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": $json.message || 'An error occurred during NFT minting',\n  \"error\": true\n}",
        "options": {}
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-nft-success",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "success-check",
      "name": "Check NFT Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [780, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for Google Sheets\nconst nftResult = $('Mint NFT on Hedera').item.json;\nconst originalData = $('Process Item Data').item.json.originalItemData;\n\n// Create row data for Google Sheets\nconst rowData = [\n  new Date().toISOString(), // Timestamp\n  originalData.itemName,    // Item Name\n  originalData.sku,         // SKU\n  parseFloat(originalData.price).toFixed(2), // Price\n  originalData.category || 'Uncategorized', // Category\n  nftResult.tokenId,        // Hedera Token ID\n  nftResult.serialNumber,   // Serial Number\n  'In Stock',              // Status\n  nftResult.explorerUrl,   // Explorer URL\n  originalData.description || '', // Description\n  originalData.imageUrl || ''     // Image URL\n];\n\nreturn [{\n  json: {\n    values: [rowData]\n  }\n}];"
      },
      "id": "prepare-sheets-data",
      "name": "Prepare Sheets Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [780, 200]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Item Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Item Data": {
      "main": [
        [
          {
            "node": "Mint NFT on Hedera",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mint NFT on Hedera": {
      "main": [
        [
          {
            "node": "Check NFT Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check NFT Success": {
      "main": [
        [
          {
            "node": "Prepare Sheets Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Sheets Data": {
      "main": [
        [
          {
            "node": "Update Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Google Sheets": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "edgeflow",
      "name": "EdgeFlow"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "nft",
      "name": "NFT"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "hedera",
      "name": "Hedera"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 